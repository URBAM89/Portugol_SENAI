/* Sobre Vetores e Matrizes
 * CONCEITO DE VETORES: Tipo de variáveis que, são utilizadas para armazenar vários dados. O que esses dados 
 * tem em comum é que eles são do mesmo tipo.
 * 
 * DECLARAÇÃO:
 * Tipo_da_Variável "Nome_do_vetor" [x]
 * Esse '[x]' é que identifica um vetor. 'x' é 1 valor que pode limitar o tamanho desse vetor, sendo opcional,
 * caso já queira atribuir valores no vetor na declaração da variável.
 *  
 * 'x' também serve para indentificar o ÍNDICE do vetor. Nós usaremos esse índice para acessar os valores armaze-
 * nados no vetor, e a declaração desse índice deve ser com um valor INTEIRO. E pra deixar bem claro: TAMANHO E 
 * ÍNDICE NÃO SÃO A MESMA COISA.
 *  
 * OBS1: É importante lembrar que o índice começa do '0' (zero), e vai até o 'TAMANHO DO VETOR - 1' (' x - 1 ').
 * OBS2: Podemos pensar no conceito de vetores, como se fosse uma rua, onde cada morador possuí a sua casa, e 
 * cada casa possuí o seu endereço. Exemplos de vetores: */

	inteiro a []	 					/* Vetor de tipo inteiro, chamado 'a', que possui NO MOMENTO 1
									   posição. Essa posição é a '0';*/
	
	cadeia nome [3] 						/* Vetor de tipo cadeia, chamado 'nome', que possui 3 posições AINDA
									   NÃO PREENCHIDAS, que vão de 0 até 2. ATENÇÃO: Quando o vetor é
									   declarado dessa forma, NÃO TEREMOS ERRO (mais explicação adiante);
									*/
	
	real altura [4]= {1.20, 2.00, 1.70, 10.00}	/* Vetor de tipo real, chamado 'altura', que possui 4 posições 
									   que vão de 0 até 3 DEVIDAMENTE PREENCHIDAS. Para ler as in-
									   formações desse vetor,faremos da seguinte forma:
									   Em altura[0] temos o valor '1.20'
									   Em altura[1] temos o valor '2.00'
									   Em altura[2] temos o valor '1.70'
									   Em altura[3] temos o valor '10.0'; */
	
	caracter letras [7] = {'F', 'U', 'T', 'I'}	/* Vetor de tipo caractere, chamado 'letras', que possui 7 posições que
									   vão de 0 até 6. As posições de [0] a [3] estão preenchidas, enquanto
									   as posições de [4] a [6] não tem valor. Para o Portugol, isso gera
									   um erro, pois é esperado que, SE DECLARE VALOR EM TODAS AS POSIÇÕES 
								         (ou se declara todos os valores, ou nenhum). */

/* Para acessar os valores de um vetor, podemos utilizar o conceito aprendido em estruturas de repetição, onde nós iremos co-
 * locar o nosso vetor nessa estrutura, para que possamos fazer o desejado: Inserir ou alterar valores, ou procurar algo que
 * desejamos. Veja o exemplo abaixo, utilizando a estrutura de repetição para para encontrar o valor '2' (lembrando que isso
 * é 1 exemplo SIMPLES de busca, veremos mais tarde modelos mais sofisticados): */
	
	inclua biblioteca Util --> u 	/* Biblioteca inserida, que dentre muitas funções, usaremos para identificar quantos ele-
	                                 mentos tem no vetor. Lembre de usa-la para facilitar seu trabalho. 😉 */
	
	inteiro num [6] = {3, 8, 9, 7, 2, 7}
	inteiro cont, achou = 0
	
	funcao inicio()
	{
	para (cont = 0; cont < u.numero_elementos(num); cont ++) /* u.numero_elementos(variavel) é o comando da biblioteca que 
											identifica quantos elementos tem no vetor. */ 
	{
		se (num [cont] == 2)
		{
			achou ++
			pare
		}
	}

		se (achou == 1)
		{
			escreva ("Número 2 encontrado na posição: ", cont)
		}
		senao
		{
			escreva ("Número 2 não foi encontrado.")
		}
	}

  
/* CONCEITO DE MATRIZES: Tem um conceito semelhante a vetores, MAS COM UMA DIFERENÇA: Vetores é um tipo de estrutura que
 * possui apenas 1 dimensão, ou seja, ela é LINEAR/HORIZONTAL(tal como uma lista). Já Matrizes possuem 2 dimensões, OU
 * SEJA, É BILINEAR/VERTICAL-HORIZONTAL (tal como uma tabulação). Exemplo para melhor visualização:
 *  
 *   vetor =  [0, 1, 2, 3, 4, 5, (...)]
 *  
 *   matriz = [0-0, 0-1, 0-2, 0-3, 0-4, 0-5,  (...)
 *  		   1-0, 1-1, 1-2, 1-3, 1-4, 1-5,   (...)
 *  		   2-0, 2-1, 2-2, 2-3, 2-4, 2-5,   (...)
 *  		   3-0, 3-1, 3-2, 3-3, 3-4, 3-5,   (...)
 *  		   (n-1)-0 , ..................,   (...)]
 *  		   
 * OBS3: Se vetores tem sua primeira posição iniciada em [0], por ser BILINEAR matrizes iniciam na posição [0,0];
 * OBS4: Se os vetores estão para as ruas, podemos dizer que matrizes estão mais para bairros, que possuem várias
 * ruas horizontais (vetores) e verticais (colunas).
 * 
 * DECLARAÇÃO:
 * Tipo_da_variável "Nome_da_Matriz" [X][Y]
 * Agora nós temos na delcaração do índice, tanto elemento 'X' (a linha) como também o elemento 'Y', que serve jus-
 * tamente para identificar o eixo VERTICAL (a coluna) da matriz. Exemplo de matrizes: */
	
	inteiro num [2][3] /* Matriz do tipo inteiro, chamada 'num'. Ela possui 2 linhas (0 e 1) e
					 3 colunas (0, 1 e 2). Para melhor visualizar, seria algo assim:
					 		      num_Y[0]	 ,    num_Y[1]	 ,	num_Y[2] 
					 num_X [0] =	 [0][0]	 ,	 [0][1]	 ,	 [0][2]	 
					 num_X [1] =	 [1][0]	 ,	 [1][1]	 ,	 [1][2]

/* E assim como os vetores, matrizes também iniciam COM ÍNDICE '0', mas agora, basta lembrar que por ser BILINEAR,
 * elas iniciam em [0][0]. O fim de uma matriz, passa agora a ser [X - 1][Y - 1]. E para reforçar o que vimos antes:
 * TAMANHO NÃO É ÍNDICE!!
 *
 * OBS5: Atente que, para o Portugol, se você declarar que uma matriz possui como índices [1][2], a IDE irá alte-
 * rar ela para virar um VETOR [2], pois ele irá compreender que você declarou uma matriz LINEAR.					
 *
 * Para acessar os valores de uma matriz, usaremos o mesmo conceito que usamos para acessar os valores de um vetor
 *  MAS DESSA VEZ, DEVEMOS TAMBÉM CONSIDERAR AS COLUNAS 'Y'. Veja abaixo como é feito o acesso para um pequeno código
 * que preenche uma matriz de tamanho 2-2: */

	inclua biblioteca Util --> u
	inteiro cont_x, cont_y, num [2][2]
	funcao inicio()
	{
	
		
		para (cont_x = 0; cont_x < u.numero_linhas(num) ; cont_x ++)
		{
			para (cont_y = 0; cont_y < u.numero_colunas(num) ; cont_y ++)
			{
				escreva ("Informe o valor para o índice [",cont_x,"][",cont_y,"] da matriz : ")
				leia (num[cont_x][cont_y])
			}
		}

		para (cont_x = 0; cont_x < u.numero_linhas(num) ; cont_x ++)
		{
			para (cont_y = 0; cont_y < u.numero_colunas(num) ; cont_y ++)
			{
				escreva ("Em [",cont_x,"][",cont_y,"] da matriz, temos : ", num[cont_x][cont_y] ,"\n")
			}
		}
	}

/* OBS6 - TALVEZ A MAIS IMPORTANTE DE TODAS (serinho, não esqueça disso pelamorde_____): Caso o usuário tente acessar um índice
 * que esteja FORA DO VETOR/MATRIZ (um vetor de 3 posições, e tentar acessar por exemplo, a posição 5), teremos uma mensagem de
 * erro. É como se o algoritmo tentasse acessar 1 espaço de memória que não existe, logo, não há o que ser acessado.
 *
 *[ ESPERANDO PELA AULA DE VETORES E MATRIZES PARA LIBERAR ESSE MATERIAL PARA OS COLEGAS ]
 * > COMPLEMENTAR ESSE MATERIAL, COM O QUE O PROFESSOR POSSA PASSAR EM SALA
 * 07/03/2023 - 12:26 (material idealizado e escrito por: Filipe de Sá Mascarenhas)


 */
